{
  "ver": "1.0.23",
  "uuid": "135927d5-2219-472e-b3ab-37b76bd7312b",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\n\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform float speedX;\nuniform float speedY;\n#endif\n\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n\n  vec2 uv = v_uv0.xy;\n  float tx = cc_time.x * speedX;\n  float ty = cc_time.x * speedY;\n\n  uv.x = fract(uv.x - tx);\n  uv.y = fract(uv.y - ty);\n\n  #if USE_TEXTURE\n  o *= texture2D(texture, uv);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, uv + vec2(0, 0.5)).r;\n    #endif\n  #endif\n\n  o *= v_color;\n\n  ALPHA_TEST(o);\n\n  vec4 beginColor = vec4(0, 0, 1, 0.5);\n  vec4 endColor = vec4(0.5, 0, 0, 0.5);\n  \n  vec4 color = o;\n\n  float ratio = clamp((v_uv0.y * cos(0.5) + v_uv0.x * sin(0.5) + 0.0) * 1.0, 0.0, 1.0);\n  float beginRatio = 1.0 - ratio;\n  float endRatio = ratio;\n\n  gl_FragColor = vec4(\n    color.r * (beginColor.r * beginRatio + endColor.r * endRatio),\n    color.g * (beginColor.g * beginRatio + endColor.g * endRatio),\n    color.b * (beginColor.b * beginRatio + endColor.b * endRatio),\n    color.a * (beginColor.a * beginRatio + endColor.a * endRatio)\n  );\n\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform MoveAttrb {\n  float speedX;\n  float speedY;\n}\n \n#endif\n\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n\n  vec2 uv = v_uv0.xy;\n  float tx = cc_time.x * speedX;\n  float ty = cc_time.x * speedY;\n\n  uv.x = fract(uv.x - tx);\n  uv.y = fract(uv.y - ty);\n\n  #if USE_TEXTURE\n  o *= texture(texture, uv);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, uv + vec2(0, 0.5)).r;\n    #endif\n  #endif\n\n  o *= v_color;\n\n  ALPHA_TEST(o);\n\n  vec4 beginColor = vec4(0, 0, 1, 0.5);\n  vec4 endColor = vec4(0.5, 0, 0, 0.5);\n  \n  vec4 color = o;\n\n  float ratio = clamp((v_uv0.y * cos(0.5) + v_uv0.x * sin(0.5) + 0.0) * 1.0, 0.0, 1.0);\n  float beginRatio = 1.0 - ratio;\n  float endRatio = ratio;\n\n  gl_FragColor = vec4(\n    color.r * (beginColor.r * beginRatio + endColor.r * endRatio),\n    color.g * (beginColor.g * beginRatio + endColor.g * endRatio),\n    color.b * (beginColor.b * beginRatio + endColor.b * endRatio),\n    color.a * (beginColor.a * beginRatio + endColor.a * endRatio)\n  );\n\n}\n"
      }
    }
  ],
  "subMetas": {}
}